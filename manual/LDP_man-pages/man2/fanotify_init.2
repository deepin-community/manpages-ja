.\" Copyright (C) 2013, Heinrich Schuchardt <xypron.glpk@gmx.de>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided that
.\" the entire resulting derived work is distributed under the terms of
.\" a permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume.
.\" no responsibility for errors or omissions, or for damages resulting.
.\" from the use of the information contained herein.  The author(s) may.
.\" not have taken the same level of care in the production of this.
.\" manual, which is licensed free of charge, as they might when working.
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH FANOTIFY_INIT 2 2014\-10\-02 Linux "Linux Programmer's Manual"
.SH 名前
fanotify_init \- fanotify グループを作成し、初期化する
.SH 書式
\fB#include <fcntl.h>\fP
.br
\fB#include <sys/fanotify.h>\fP
.sp
\fBint fanotify_init(unsigned int \fP\fIflags\fP\fB, unsigned int
\fP\fIevent_f_flags\fP\fB);\fP
.SH 説明
fanotify API の概要については \fBfanotify\fP(7) を参照。
.PP
\fBfanotify_init\fP() は新しい fanotify グループを初期化し、
このグループに関連付けられたイベントキューに対するファイルディスクリプターを返す。
.PP
このファイルディスクリプターは、 \fBfanotify_mark\fP(2) の呼び出しで fanotify イベントが作成されるファイル、 ディレクトリ、
マウントを指定するのに使用できる。 \fBfanotify_mark\fP(2) で指定したファイル、 これらのイベントは、
このファイルディスクリプターからの読み出しで受信する。 いくつかのイベントは、 ファイルがアクセスされたことを示す単なる情報である。
他のいくつかのイベントは、 別のアプリケーションがファイルやディレクトリにアクセスする許可を与えるかを判定するのに使用される。
ファイルシステムオブジェクトへのアクセス許可イベントについては、 承認結果をこのファイルディスクリプターに書き込む。
.PP
複数のプログラムが同時に fanotify インターフェースを使って同じファイルを同時に監視することができる。
.PP
現在の実装では、 ユーザーあたりの fanotify グループ数は 128 に制限されている。 この制限は上書きすることができない。
.PP
\fBfanotify_init\fP() を呼び出すには \fBCAP_SYS_ADMIN\fP ケーパビリティーが必要である。 この制約は将来のバージョンの
API で緩和される可能性がある。 そのため、 以下に示すケーパビリティーチェックのいくつかが実装されている。
.PP
\fIflags\fP 引き数は、 イベントを待つアプリケーションの通知クラスを定義する複数ビットのフィールドである。 これに加えて、
このファイルディスクリプターの動作を示す 1 ビットのフィールドがある。
.PP
アクセス許可イベントを監視しているプログラムが複数いる場合、 通知クラスを使って監視するプログラムのイベント受信順序が管理される。
.PP
以下の通知クラスのいずれか一つだけを \fIflags\fP に指定できる。
.TP 
\fBFAN_CLASS_PRE_CONTENT\fP
この値は、 ファイルがアクセスされたことを通知するイベントと、 ファイルへのアクセスするかの許可の判断を求めるイベントを受信することを示す。
これはイベント受信者がファイルが最終的なデータを格納する前にそのファイルにアクセスする必要がある場合に使用される。
この通知クラスは例えば階層型ストレージ管理などで使用される。
.TP 
\fBFAN_CLASS_CONTENT\fP
この値は、 ファイルがアクセスされたことを通知するイベントと、 ファイルへのアクセスするかの許可の判断を求めるイベントを受信することを示す。
これはイベント受信者がファイルに最終的なデータが格納された際にそのファイルにアクセスする必要がある場合に使用される。
この通知クラスは例えばウイルス検知プログラムなどで使用される。
.TP 
\fBFAN_CLASS_NOTIF\fP
これはデフォルト値である。 この値を指定する必要はない。 この値は、 ファイルがアクセスされたことを通知するイベントの受信だけを行うことを意味する。
ファイルがアクセスする前にアクセス許可の判定を行うことはできない。
.PP
異なる通知クラスの受信者は \fBFAN_CLASS_PRE_CONTENT\fP, \fBFAN_CLASS_CONTENT\fP,
\fBFAN_CLASS_NOTIF\fP の順序でイベントを受信する。 同じ通知クラスの受信者での通知順序は不定である。
.PP
\fIflags\fP には以下のビットを追加でセットすることができる。
.TP 
\fBFAN_CLOEXEC\fP
close\-on\-exec フラグ (\fBFD_CLOEXEC\fP) を新しいファイルディスクリプターにセットする。 \fBopen\fP(2) の
\fBO_CLOEXEC\fP フラグの説明を参照。
.TP 
\fBFAN_NONBLOCK\fP
ノンブロッキングフラグ (\fBO_NONBLOCK\fP) をそのファイルディスクリプターで有効にする。
このファイルディスクリプターからの読み出しは停止しない。 その代わり、 読みだし可能なデータが何もない場合、 \fBread\fP(2) はエラー
\fBEAGAIN\fP で失敗する。
.TP 
\fBFAN_UNLIMITED_QUEUE\fP
そのイベントキューの 16384 イベントの上限を削除する。 このフラグを使用するには \fBCAP_SYS_ADMIN\fP ケーパビリティーが必要である。
.TP 
\fBFAN_UNLIMITED_MARKS\fP
8192 マークの上限を削除する。 このフラグを使用するには \fBCAP_SYS_ADMIN\fP ケーパビリティーが必要である。
.PP
\fIevent_f_flags\fP 引き数は fanotify イベントが作成されるオープンファイル記述にセットされるファイル状態フラグを定義する。
これらのフラグの詳細については \fBopen\fP(2) の \fIflags\fP 値の説明を参照のこと。 \fIevent_f_flags\fP
にはアクセスモードのビットを複数入れることができる。 このフィールドには以下の値も指定することができる。
.TP 
\fBO_RDONLY\fP
読み出しアクセスのみを許可する。
.TP 
\fBO_WRONLY\fP
書き込みアクセスのみを許可する。
.TP 
\fBO_RDWR\fP
読み出しと書き込みの両方を許可する。
.PP
他のビットも \fIevent_f_flags\fP もセットすることができる。 役立つであろう値は以下である。
.TP 
\fBO_LARGEFILE\fP
2 GB を超えるファイルのサポートを有効にする。 このフラグのセットに失敗すると、 32 ビットシステムで fanotify
グループが監視するラージファイルをオープンしようとした際に \fBEOVERFLOW\fP エラーとなる。
.TP 
\fBO_CLOEXEC\fP
このファイルディスクリプターで close\-on\-exec フラグを有効にする。 このフラグが役立つ理由については \fBopen\fP(2) の
\fBO_CLOEXEC\fP フラグの説明を参照。
.PP
\fBO_APPEND\fP, \fBO_DSYNC\fP, \fBO_NOATIME\fP, \fBO_NONBLOCK\fP, \fBO_SYNC\fP も指定することができる。
\fIevent_f_flags\fP にこれ以外のフラグを指定すると、 エラー \fBEINVAL\fP が起こる (ただし、バグを参照)。
.SH 返り値
成功すると \fBfanotify_init\fP() は新しいファイルディスクリプターを返す。 エラーの場合、 \-1 を返し、 \fIerrno\fP
にエラーを示す値を設定する。
.SH エラー
.TP 
\fBEINVAL\fP
\fIflags\fP か \fIevent_f_flags\fP に無効な値が渡された。 \fBFAN_ALL_INIT_FLAGS\fP で \fIflags\fP
に指定できる全ビットが定義されている。
.TP 
\fBEMFILE\fP
このユーザーの fanotify グループ数が 128 を超過した。
.TP 
\fBENOMEM\fP
通知グループへのメモリー割り当てが失敗した。
.TP 
\fBENOSYS\fP
このカーネルは \fBfanotify_init\fP() を実装していない。 fanotify API が利用できるのは、 カーネルが
\fBCONFIG_FANOTIFY\fP を有効にして作成されている場合だけである。
.TP 
\fBEPERM\fP
呼び出し元が \fBCAP_SYS_ADMIN\fP ケーパビリティーを持っていないので、操作が許可されない。
.SH バージョン
\fBfanotify_init\fP() は Linux カーネルのバージョン 2.6.36 で導入され、 バージョン 2.6.37 で有効になった。
.SH 準拠
このシステムコールは Linux 独自である。
.SH バグ
Linux 3.17 時点では、 以下のバグが存在する。
.IP * 3
.\" FIXME . Patch proposed: https://lkml.org/lkml/2014/9/24/967
\fBO_CLOEXEC\fP が \fIevent_f_flags\fP に指定された場合、 無視される。
.PP
バージョン 3.14 より前の Linux カーネルには以下のバグが存在する。
.IP * 3
.\" Fixed by commit 48149e9d3a7e924010a0daab30a6197b7d7b6580
\fIevent_f_flags\fP 引き数に無効なフラグがないかのチェックが行われない。 \fBFMODE_EXEC\fP
などの内部での使用のみが意図されたフラグを指定することができ、 その場合 fanotify
ファイルディスクリプターからの読み出し時に返されるファイルディスクリプターにそのフラグがセットされる。
.SH 関連項目
\fBfanotify_mark\fP(2), \fBfanotify\fP(7)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 3.79 の一部
である。プロジェクトの説明とバグ報告に関する情報は
http://www.kernel.org/doc/man\-pages/ に書かれている。
